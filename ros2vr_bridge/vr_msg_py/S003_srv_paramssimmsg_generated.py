# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Vec3Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec3Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec3Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec3MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x33", size_prefixed=size_prefixed)

    # Vec3Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec3Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec3MsgStart(builder):
    builder.StartObject(3)

def Vec3MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec3MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec3MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec3MsgEnd(builder):
    return builder.EndObject()



class Vec3MsgT(object):

    # Vec3MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec3Msg = Vec3Msg()
        vec3Msg.Init(buf, pos)
        return cls.InitFromObj(vec3Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec3Msg):
        x = Vec3MsgT()
        x._UnPack(vec3Msg)
        return x

    # Vec3MsgT
    def _UnPack(self, vec3Msg):
        if vec3Msg is None:
            return
        self.x = vec3Msg.X()
        self.y = vec3Msg.Y()
        self.z = vec3Msg.Z()

    # Vec3MsgT
    def Pack(self, builder):
        Vec3MsgStart(builder)
        Vec3MsgAddX(builder, self.x)
        Vec3MsgAddY(builder, self.y)
        Vec3MsgAddZ(builder, self.z)
        vec3Msg = Vec3MsgEnd(builder)
        return vec3Msg


class Vec4Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec4Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec4Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec4MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x33", size_prefixed=size_prefixed)

    # Vec4Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec4Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec4MsgStart(builder):
    builder.StartObject(4)

def Vec4MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec4MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec4MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec4MsgAddW(builder, w):
    builder.PrependFloat32Slot(3, w, 0.0)

def Vec4MsgEnd(builder):
    return builder.EndObject()



class Vec4MsgT(object):

    # Vec4MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.w = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec4Msg = Vec4Msg()
        vec4Msg.Init(buf, pos)
        return cls.InitFromObj(vec4Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec4Msg):
        x = Vec4MsgT()
        x._UnPack(vec4Msg)
        return x

    # Vec4MsgT
    def _UnPack(self, vec4Msg):
        if vec4Msg is None:
            return
        self.x = vec4Msg.X()
        self.y = vec4Msg.Y()
        self.z = vec4Msg.Z()
        self.w = vec4Msg.W()

    # Vec4MsgT
    def Pack(self, builder):
        Vec4MsgStart(builder)
        Vec4MsgAddX(builder, self.x)
        Vec4MsgAddY(builder, self.y)
        Vec4MsgAddZ(builder, self.z)
        Vec4MsgAddW(builder, self.w)
        vec4Msg = Vec4MsgEnd(builder)
        return vec4Msg


class SrvParamsSimMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SrvParamsSimMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSrvParamsSimMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SrvParamsSimMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x33", size_prefixed=size_prefixed)

    # SrvParamsSimMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SrvParamsSimMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SrvParamsSimMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvParamsSimMsg
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvParamsSimMsg
    def ReqSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvParamsSimMsg
    def CmdReportOnce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvParamsSimMsg
    def CmdReset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvParamsSimMsg
    def StreamToRjs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvParamsSimMsg
    def StreamToWs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvParamsSimMsg
    def NoiseOn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvParamsSimMsg
    def SetStreamToRjs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvParamsSimMsg
    def SetStreamToWs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvParamsSimMsg
    def SetNoiseOn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def SrvParamsSimMsgStart(builder):
    builder.StartObject(12)

def SrvParamsSimMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(0, timestamp, 0.0)

def SrvParamsSimMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def SrvParamsSimMsgAddId(builder, id):
    builder.PrependUint32Slot(2, id, 0)

def SrvParamsSimMsgAddReqSrcId(builder, reqSrcId):
    builder.PrependUint32Slot(3, reqSrcId, 0)

def SrvParamsSimMsgAddCmdReportOnce(builder, cmdReportOnce):
    builder.PrependUint32Slot(4, cmdReportOnce, 0)

def SrvParamsSimMsgAddCmdReset(builder, cmdReset):
    builder.PrependUint32Slot(5, cmdReset, 0)

def SrvParamsSimMsgAddStreamToRjs(builder, streamToRjs):
    builder.PrependUint32Slot(6, streamToRjs, 0)

def SrvParamsSimMsgAddStreamToWs(builder, streamToWs):
    builder.PrependUint32Slot(7, streamToWs, 0)

def SrvParamsSimMsgAddNoiseOn(builder, noiseOn):
    builder.PrependUint32Slot(8, noiseOn, 0)

def SrvParamsSimMsgAddSetStreamToRjs(builder, setStreamToRjs):
    builder.PrependUint32Slot(9, setStreamToRjs, 0)

def SrvParamsSimMsgAddSetStreamToWs(builder, setStreamToWs):
    builder.PrependUint32Slot(10, setStreamToWs, 0)

def SrvParamsSimMsgAddSetNoiseOn(builder, setNoiseOn):
    builder.PrependUint32Slot(11, setNoiseOn, 0)

def SrvParamsSimMsgEnd(builder):
    return builder.EndObject()



class SrvParamsSimMsgT(object):

    # SrvParamsSimMsgT
    def __init__(self):
        self.timestamp = 0.0  # type: float
        self.name = None  # type: str
        self.id = 0  # type: int
        self.reqSrcId = 0  # type: int
        self.cmdReportOnce = 0  # type: int
        self.cmdReset = 0  # type: int
        self.streamToRjs = 0  # type: int
        self.streamToWs = 0  # type: int
        self.noiseOn = 0  # type: int
        self.setStreamToRjs = 0  # type: int
        self.setStreamToWs = 0  # type: int
        self.setNoiseOn = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        srvParamsSimMsg = SrvParamsSimMsg()
        srvParamsSimMsg.Init(buf, pos)
        return cls.InitFromObj(srvParamsSimMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, srvParamsSimMsg):
        x = SrvParamsSimMsgT()
        x._UnPack(srvParamsSimMsg)
        return x

    # SrvParamsSimMsgT
    def _UnPack(self, srvParamsSimMsg):
        if srvParamsSimMsg is None:
            return
        self.timestamp = srvParamsSimMsg.Timestamp()
        self.name = srvParamsSimMsg.Name()
        self.id = srvParamsSimMsg.Id()
        self.reqSrcId = srvParamsSimMsg.ReqSrcId()
        self.cmdReportOnce = srvParamsSimMsg.CmdReportOnce()
        self.cmdReset = srvParamsSimMsg.CmdReset()
        self.streamToRjs = srvParamsSimMsg.StreamToRjs()
        self.streamToWs = srvParamsSimMsg.StreamToWs()
        self.noiseOn = srvParamsSimMsg.NoiseOn()
        self.setStreamToRjs = srvParamsSimMsg.SetStreamToRjs()
        self.setStreamToWs = srvParamsSimMsg.SetStreamToWs()
        self.setNoiseOn = srvParamsSimMsg.SetNoiseOn()

    # SrvParamsSimMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        SrvParamsSimMsgStart(builder)
        SrvParamsSimMsgAddTimestamp(builder, self.timestamp)
        if self.name is not None:
            SrvParamsSimMsgAddName(builder, name)
        SrvParamsSimMsgAddId(builder, self.id)
        SrvParamsSimMsgAddReqSrcId(builder, self.reqSrcId)
        SrvParamsSimMsgAddCmdReportOnce(builder, self.cmdReportOnce)
        SrvParamsSimMsgAddCmdReset(builder, self.cmdReset)
        SrvParamsSimMsgAddStreamToRjs(builder, self.streamToRjs)
        SrvParamsSimMsgAddStreamToWs(builder, self.streamToWs)
        SrvParamsSimMsgAddNoiseOn(builder, self.noiseOn)
        SrvParamsSimMsgAddSetStreamToRjs(builder, self.setStreamToRjs)
        SrvParamsSimMsgAddSetStreamToWs(builder, self.setStreamToWs)
        SrvParamsSimMsgAddSetNoiseOn(builder, self.setNoiseOn)
        srvParamsSimMsg = SrvParamsSimMsgEnd(builder)
        return srvParamsSimMsg


