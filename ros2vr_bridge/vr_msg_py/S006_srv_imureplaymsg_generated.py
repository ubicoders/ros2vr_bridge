# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Vec3Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec3Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec3Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec3MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x36", size_prefixed=size_prefixed)

    # Vec3Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec3Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec3MsgStart(builder):
    builder.StartObject(3)

def Vec3MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec3MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec3MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec3MsgEnd(builder):
    return builder.EndObject()



class Vec3MsgT(object):

    # Vec3MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec3Msg = Vec3Msg()
        vec3Msg.Init(buf, pos)
        return cls.InitFromObj(vec3Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec3Msg):
        x = Vec3MsgT()
        x._UnPack(vec3Msg)
        return x

    # Vec3MsgT
    def _UnPack(self, vec3Msg):
        if vec3Msg is None:
            return
        self.x = vec3Msg.X()
        self.y = vec3Msg.Y()
        self.z = vec3Msg.Z()

    # Vec3MsgT
    def Pack(self, builder):
        Vec3MsgStart(builder)
        Vec3MsgAddX(builder, self.x)
        Vec3MsgAddY(builder, self.y)
        Vec3MsgAddZ(builder, self.z)
        vec3Msg = Vec3MsgEnd(builder)
        return vec3Msg


class Vec4Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec4Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec4Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec4MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x36", size_prefixed=size_prefixed)

    # Vec4Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec4Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec4MsgStart(builder):
    builder.StartObject(4)

def Vec4MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec4MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec4MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec4MsgAddW(builder, w):
    builder.PrependFloat32Slot(3, w, 0.0)

def Vec4MsgEnd(builder):
    return builder.EndObject()



class Vec4MsgT(object):

    # Vec4MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.w = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec4Msg = Vec4Msg()
        vec4Msg.Init(buf, pos)
        return cls.InitFromObj(vec4Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec4Msg):
        x = Vec4MsgT()
        x._UnPack(vec4Msg)
        return x

    # Vec4MsgT
    def _UnPack(self, vec4Msg):
        if vec4Msg is None:
            return
        self.x = vec4Msg.X()
        self.y = vec4Msg.Y()
        self.z = vec4Msg.Z()
        self.w = vec4Msg.W()

    # Vec4MsgT
    def Pack(self, builder):
        Vec4MsgStart(builder)
        Vec4MsgAddX(builder, self.x)
        Vec4MsgAddY(builder, self.y)
        Vec4MsgAddZ(builder, self.z)
        Vec4MsgAddW(builder, self.w)
        vec4Msg = Vec4MsgEnd(builder)
        return vec4Msg


class SrvIMUReplayMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SrvIMUReplayMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSrvIMUReplayMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SrvIMUReplayMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x36", size_prefixed=size_prefixed)

    # SrvIMUReplayMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SrvIMUReplayMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SrvIMUReplayMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvIMUReplayMsg
    def SysId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvIMUReplayMsg
    def ReqSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvIMUReplayMsg
    def SetReplay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SrvIMUReplayMsg
    def TimestampGt(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SrvIMUReplayMsg
    def TimestampGtAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # SrvIMUReplayMsg
    def TimestampGtLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SrvIMUReplayMsg
    def TimestampGtIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # SrvIMUReplayMsg
    def EulerEst(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SrvIMUReplayMsg
    def EulerEstLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SrvIMUReplayMsg
    def EulerEstIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # SrvIMUReplayMsg
    def EulerGt(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SrvIMUReplayMsg
    def EulerGtLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SrvIMUReplayMsg
    def EulerGtIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def SrvIMUReplayMsgStart(builder):
    builder.StartObject(8)

def SrvIMUReplayMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(0, timestamp, 0.0)

def SrvIMUReplayMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def SrvIMUReplayMsgAddSysId(builder, sysId):
    builder.PrependUint32Slot(2, sysId, 0)

def SrvIMUReplayMsgAddReqSrcId(builder, reqSrcId):
    builder.PrependUint32Slot(3, reqSrcId, 0)

def SrvIMUReplayMsgAddSetReplay(builder, setReplay):
    builder.PrependBoolSlot(4, setReplay, 0)

def SrvIMUReplayMsgAddTimestampGt(builder, timestampGt):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(timestampGt), 0)

def SrvIMUReplayMsgStartTimestampGtVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def SrvIMUReplayMsgAddEulerEst(builder, eulerEst):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(eulerEst), 0)

def SrvIMUReplayMsgStartEulerEstVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def SrvIMUReplayMsgAddEulerGt(builder, eulerGt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(eulerGt), 0)

def SrvIMUReplayMsgStartEulerGtVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def SrvIMUReplayMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class SrvIMUReplayMsgT(object):

    # SrvIMUReplayMsgT
    def __init__(self):
        self.timestamp = 0.0  # type: float
        self.name = None  # type: str
        self.sysId = 0  # type: int
        self.reqSrcId = 0  # type: int
        self.setReplay = False  # type: bool
        self.timestampGt = None  # type: List[float]
        self.eulerEst = None  # type: List[Vec3MsgT]
        self.eulerGt = None  # type: List[Vec3MsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        srvImureplayMsg = SrvIMUReplayMsg()
        srvImureplayMsg.Init(buf, pos)
        return cls.InitFromObj(srvImureplayMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, srvImureplayMsg):
        x = SrvIMUReplayMsgT()
        x._UnPack(srvImureplayMsg)
        return x

    # SrvIMUReplayMsgT
    def _UnPack(self, srvImureplayMsg):
        if srvImureplayMsg is None:
            return
        self.timestamp = srvImureplayMsg.Timestamp()
        self.name = srvImureplayMsg.Name()
        self.sysId = srvImureplayMsg.SysId()
        self.reqSrcId = srvImureplayMsg.ReqSrcId()
        self.setReplay = srvImureplayMsg.SetReplay()
        if not srvImureplayMsg.TimestampGtIsNone():
            if np is None:
                self.timestampGt = []
                for i in range(srvImureplayMsg.TimestampGtLength()):
                    self.timestampGt.append(srvImureplayMsg.TimestampGt(i))
            else:
                self.timestampGt = srvImureplayMsg.TimestampGtAsNumpy()
        if not srvImureplayMsg.EulerEstIsNone():
            self.eulerEst = []
            for i in range(srvImureplayMsg.EulerEstLength()):
                if srvImureplayMsg.EulerEst(i) is None:
                    self.eulerEst.append(None)
                else:
                    vec3Msg_ = Vec3MsgT.InitFromObj(srvImureplayMsg.EulerEst(i))
                    self.eulerEst.append(vec3Msg_)
        if not srvImureplayMsg.EulerGtIsNone():
            self.eulerGt = []
            for i in range(srvImureplayMsg.EulerGtLength()):
                if srvImureplayMsg.EulerGt(i) is None:
                    self.eulerGt.append(None)
                else:
                    vec3Msg_ = Vec3MsgT.InitFromObj(srvImureplayMsg.EulerGt(i))
                    self.eulerGt.append(vec3Msg_)

    # SrvIMUReplayMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.timestampGt is not None:
            if np is not None and type(self.timestampGt) is np.ndarray:
                timestampGt = builder.CreateNumpyVector(self.timestampGt)
            else:
                SrvIMUReplayMsgStartTimestampGtVector(builder, len(self.timestampGt))
                for i in reversed(range(len(self.timestampGt))):
                    builder.PrependFloat32(self.timestampGt[i])
                timestampGt = builder.EndVector()
        if self.eulerEst is not None:
            eulerEstlist = []
            for i in range(len(self.eulerEst)):
                eulerEstlist.append(self.eulerEst[i].Pack(builder))
            SrvIMUReplayMsgStartEulerEstVector(builder, len(self.eulerEst))
            for i in reversed(range(len(self.eulerEst))):
                builder.PrependUOffsetTRelative(eulerEstlist[i])
            eulerEst = builder.EndVector()
        if self.eulerGt is not None:
            eulerGtlist = []
            for i in range(len(self.eulerGt)):
                eulerGtlist.append(self.eulerGt[i].Pack(builder))
            SrvIMUReplayMsgStartEulerGtVector(builder, len(self.eulerGt))
            for i in reversed(range(len(self.eulerGt))):
                builder.PrependUOffsetTRelative(eulerGtlist[i])
            eulerGt = builder.EndVector()
        SrvIMUReplayMsgStart(builder)
        SrvIMUReplayMsgAddTimestamp(builder, self.timestamp)
        if self.name is not None:
            SrvIMUReplayMsgAddName(builder, name)
        SrvIMUReplayMsgAddSysId(builder, self.sysId)
        SrvIMUReplayMsgAddReqSrcId(builder, self.reqSrcId)
        SrvIMUReplayMsgAddSetReplay(builder, self.setReplay)
        if self.timestampGt is not None:
            SrvIMUReplayMsgAddTimestampGt(builder, timestampGt)
        if self.eulerEst is not None:
            SrvIMUReplayMsgAddEulerEst(builder, eulerEst)
        if self.eulerGt is not None:
            SrvIMUReplayMsgAddEulerGt(builder, eulerGt)
        srvImureplayMsg = SrvIMUReplayMsgEnd(builder)
        return srvImureplayMsg


