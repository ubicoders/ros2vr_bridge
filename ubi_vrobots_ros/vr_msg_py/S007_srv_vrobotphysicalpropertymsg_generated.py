# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Vec3Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec3Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec3Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec3MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x37", size_prefixed=size_prefixed)

    # Vec3Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec3Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec3MsgStart(builder):
    builder.StartObject(3)

def Vec3MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec3MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec3MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec3MsgEnd(builder):
    return builder.EndObject()



class Vec3MsgT(object):

    # Vec3MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec3Msg = Vec3Msg()
        vec3Msg.Init(buf, pos)
        return cls.InitFromObj(vec3Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec3Msg):
        x = Vec3MsgT()
        x._UnPack(vec3Msg)
        return x

    # Vec3MsgT
    def _UnPack(self, vec3Msg):
        if vec3Msg is None:
            return
        self.x = vec3Msg.X()
        self.y = vec3Msg.Y()
        self.z = vec3Msg.Z()

    # Vec3MsgT
    def Pack(self, builder):
        Vec3MsgStart(builder)
        Vec3MsgAddX(builder, self.x)
        Vec3MsgAddY(builder, self.y)
        Vec3MsgAddZ(builder, self.z)
        vec3Msg = Vec3MsgEnd(builder)
        return vec3Msg


class Vec4Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec4Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec4Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec4MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x37", size_prefixed=size_prefixed)

    # Vec4Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec4Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec4MsgStart(builder):
    builder.StartObject(4)

def Vec4MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec4MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec4MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec4MsgAddW(builder, w):
    builder.PrependFloat32Slot(3, w, 0.0)

def Vec4MsgEnd(builder):
    return builder.EndObject()



class Vec4MsgT(object):

    # Vec4MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.w = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec4Msg = Vec4Msg()
        vec4Msg.Init(buf, pos)
        return cls.InitFromObj(vec4Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec4Msg):
        x = Vec4MsgT()
        x._UnPack(vec4Msg)
        return x

    # Vec4MsgT
    def _UnPack(self, vec4Msg):
        if vec4Msg is None:
            return
        self.x = vec4Msg.X()
        self.y = vec4Msg.Y()
        self.z = vec4Msg.Z()
        self.w = vec4Msg.W()

    # Vec4MsgT
    def Pack(self, builder):
        Vec4MsgStart(builder)
        Vec4MsgAddX(builder, self.x)
        Vec4MsgAddY(builder, self.y)
        Vec4MsgAddZ(builder, self.z)
        Vec4MsgAddW(builder, self.w)
        vec4Msg = Vec4MsgEnd(builder)
        return vec4Msg


class SrvVRobotPhysicalPropertyMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SrvVRobotPhysicalPropertyMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSrvVRobotPhysicalPropertyMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SrvVRobotPhysicalPropertyMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x37", size_prefixed=size_prefixed)

    # SrvVRobotPhysicalPropertyMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SrvVRobotPhysicalPropertyMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SrvVRobotPhysicalPropertyMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvVRobotPhysicalPropertyMsg
    def SysId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvVRobotPhysicalPropertyMsg
    def ReqSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvVRobotPhysicalPropertyMsg
    def SetMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SrvVRobotPhysicalPropertyMsg
    def Mass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SrvVRobotPhysicalPropertyMsg
    def SetMoi3x1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SrvVRobotPhysicalPropertyMsg
    def Moi3x1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SrvVRobotPhysicalPropertyMsgStart(builder):
    builder.StartObject(8)

def SrvVRobotPhysicalPropertyMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(0, timestamp, 0.0)

def SrvVRobotPhysicalPropertyMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def SrvVRobotPhysicalPropertyMsgAddSysId(builder, sysId):
    builder.PrependUint32Slot(2, sysId, 0)

def SrvVRobotPhysicalPropertyMsgAddReqSrcId(builder, reqSrcId):
    builder.PrependUint32Slot(3, reqSrcId, 0)

def SrvVRobotPhysicalPropertyMsgAddSetMass(builder, setMass):
    builder.PrependBoolSlot(4, setMass, 0)

def SrvVRobotPhysicalPropertyMsgAddMass(builder, mass):
    builder.PrependFloat32Slot(5, mass, 0.0)

def SrvVRobotPhysicalPropertyMsgAddSetMoi3x1(builder, setMoi3x1):
    builder.PrependBoolSlot(6, setMoi3x1, 0)

def SrvVRobotPhysicalPropertyMsgAddMoi3x1(builder, moi3x1):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(moi3x1), 0)

def SrvVRobotPhysicalPropertyMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class SrvVRobotPhysicalPropertyMsgT(object):

    # SrvVRobotPhysicalPropertyMsgT
    def __init__(self):
        self.timestamp = 0.0  # type: float
        self.name = None  # type: str
        self.sysId = 0  # type: int
        self.reqSrcId = 0  # type: int
        self.setMass = False  # type: bool
        self.mass = 0.0  # type: float
        self.setMoi3x1 = False  # type: bool
        self.moi3x1 = None  # type: Optional[Vec3MsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        srvVrobotPhysicalPropertyMsg = SrvVRobotPhysicalPropertyMsg()
        srvVrobotPhysicalPropertyMsg.Init(buf, pos)
        return cls.InitFromObj(srvVrobotPhysicalPropertyMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, srvVrobotPhysicalPropertyMsg):
        x = SrvVRobotPhysicalPropertyMsgT()
        x._UnPack(srvVrobotPhysicalPropertyMsg)
        return x

    # SrvVRobotPhysicalPropertyMsgT
    def _UnPack(self, srvVrobotPhysicalPropertyMsg):
        if srvVrobotPhysicalPropertyMsg is None:
            return
        self.timestamp = srvVrobotPhysicalPropertyMsg.Timestamp()
        self.name = srvVrobotPhysicalPropertyMsg.Name()
        self.sysId = srvVrobotPhysicalPropertyMsg.SysId()
        self.reqSrcId = srvVrobotPhysicalPropertyMsg.ReqSrcId()
        self.setMass = srvVrobotPhysicalPropertyMsg.SetMass()
        self.mass = srvVrobotPhysicalPropertyMsg.Mass()
        self.setMoi3x1 = srvVrobotPhysicalPropertyMsg.SetMoi3x1()
        if srvVrobotPhysicalPropertyMsg.Moi3x1() is not None:
            self.moi3x1 = Vec3MsgT.InitFromObj(srvVrobotPhysicalPropertyMsg.Moi3x1())

    # SrvVRobotPhysicalPropertyMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.moi3x1 is not None:
            moi3x1 = self.moi3x1.Pack(builder)
        SrvVRobotPhysicalPropertyMsgStart(builder)
        SrvVRobotPhysicalPropertyMsgAddTimestamp(builder, self.timestamp)
        if self.name is not None:
            SrvVRobotPhysicalPropertyMsgAddName(builder, name)
        SrvVRobotPhysicalPropertyMsgAddSysId(builder, self.sysId)
        SrvVRobotPhysicalPropertyMsgAddReqSrcId(builder, self.reqSrcId)
        SrvVRobotPhysicalPropertyMsgAddSetMass(builder, self.setMass)
        SrvVRobotPhysicalPropertyMsgAddMass(builder, self.mass)
        SrvVRobotPhysicalPropertyMsgAddSetMoi3x1(builder, self.setMoi3x1)
        if self.moi3x1 is not None:
            SrvVRobotPhysicalPropertyMsgAddMoi3x1(builder, moi3x1)
        srvVrobotPhysicalPropertyMsg = SrvVRobotPhysicalPropertyMsgEnd(builder)
        return srvVrobotPhysicalPropertyMsg


