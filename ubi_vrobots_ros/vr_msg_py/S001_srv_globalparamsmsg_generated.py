# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Vec3Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec3Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec3Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec3MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x31", size_prefixed=size_prefixed)

    # Vec3Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec3Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec3MsgStart(builder):
    builder.StartObject(3)

def Vec3MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec3MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec3MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec3MsgEnd(builder):
    return builder.EndObject()



class Vec3MsgT(object):

    # Vec3MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec3Msg = Vec3Msg()
        vec3Msg.Init(buf, pos)
        return cls.InitFromObj(vec3Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec3Msg):
        x = Vec3MsgT()
        x._UnPack(vec3Msg)
        return x

    # Vec3MsgT
    def _UnPack(self, vec3Msg):
        if vec3Msg is None:
            return
        self.x = vec3Msg.X()
        self.y = vec3Msg.Y()
        self.z = vec3Msg.Z()

    # Vec3MsgT
    def Pack(self, builder):
        Vec3MsgStart(builder)
        Vec3MsgAddX(builder, self.x)
        Vec3MsgAddY(builder, self.y)
        Vec3MsgAddZ(builder, self.z)
        vec3Msg = Vec3MsgEnd(builder)
        return vec3Msg


class Vec4Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec4Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec4Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec4MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x31", size_prefixed=size_prefixed)

    # Vec4Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec4Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec4MsgStart(builder):
    builder.StartObject(4)

def Vec4MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec4MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec4MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec4MsgAddW(builder, w):
    builder.PrependFloat32Slot(3, w, 0.0)

def Vec4MsgEnd(builder):
    return builder.EndObject()



class Vec4MsgT(object):

    # Vec4MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.w = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec4Msg = Vec4Msg()
        vec4Msg.Init(buf, pos)
        return cls.InitFromObj(vec4Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec4Msg):
        x = Vec4MsgT()
        x._UnPack(vec4Msg)
        return x

    # Vec4MsgT
    def _UnPack(self, vec4Msg):
        if vec4Msg is None:
            return
        self.x = vec4Msg.X()
        self.y = vec4Msg.Y()
        self.z = vec4Msg.Z()
        self.w = vec4Msg.W()

    # Vec4MsgT
    def Pack(self, builder):
        Vec4MsgStart(builder)
        Vec4MsgAddX(builder, self.x)
        Vec4MsgAddY(builder, self.y)
        Vec4MsgAddZ(builder, self.z)
        Vec4MsgAddW(builder, self.w)
        vec4Msg = Vec4MsgEnd(builder)
        return vec4Msg


class SrvGlobalParamsMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SrvGlobalParamsMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSrvGlobalParamsMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SrvGlobalParamsMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x31", size_prefixed=size_prefixed)

    # SrvGlobalParamsMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SrvGlobalParamsMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SrvGlobalParamsMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvGlobalParamsMsg
    def SysId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvGlobalParamsMsg
    def ReqSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvGlobalParamsMsg
    def Scene(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvGlobalParamsMsg
    def CmdReportOnce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvGlobalParamsMsg
    def IsSigned(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvGlobalParamsMsg
    def InputBreaker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvGlobalParamsMsg
    def PlayerMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvGlobalParamsMsg
    def SetScene(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvGlobalParamsMsg
    def SetSigniture(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvGlobalParamsMsg
    def SetInputBreaker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvGlobalParamsMsg
    def SetPlayerMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def SrvGlobalParamsMsgStart(builder):
    builder.StartObject(13)

def SrvGlobalParamsMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(0, timestamp, 0.0)

def SrvGlobalParamsMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def SrvGlobalParamsMsgAddSysId(builder, sysId):
    builder.PrependUint32Slot(2, sysId, 0)

def SrvGlobalParamsMsgAddReqSrcId(builder, reqSrcId):
    builder.PrependUint32Slot(3, reqSrcId, 0)

def SrvGlobalParamsMsgAddScene(builder, scene):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(scene), 0)

def SrvGlobalParamsMsgAddCmdReportOnce(builder, cmdReportOnce):
    builder.PrependInt32Slot(5, cmdReportOnce, 0)

def SrvGlobalParamsMsgAddIsSigned(builder, isSigned):
    builder.PrependInt32Slot(6, isSigned, 0)

def SrvGlobalParamsMsgAddInputBreaker(builder, inputBreaker):
    builder.PrependInt32Slot(7, inputBreaker, 0)

def SrvGlobalParamsMsgAddPlayerMode(builder, playerMode):
    builder.PrependInt32Slot(8, playerMode, 0)

def SrvGlobalParamsMsgAddSetScene(builder, setScene):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(setScene), 0)

def SrvGlobalParamsMsgAddSetSigniture(builder, setSigniture):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(setSigniture), 0)

def SrvGlobalParamsMsgAddSetInputBreaker(builder, setInputBreaker):
    builder.PrependInt32Slot(11, setInputBreaker, 0)

def SrvGlobalParamsMsgAddSetPlayerMode(builder, setPlayerMode):
    builder.PrependInt32Slot(12, setPlayerMode, 0)

def SrvGlobalParamsMsgEnd(builder):
    return builder.EndObject()



class SrvGlobalParamsMsgT(object):

    # SrvGlobalParamsMsgT
    def __init__(self):
        self.timestamp = 0.0  # type: float
        self.name = None  # type: str
        self.sysId = 0  # type: int
        self.reqSrcId = 0  # type: int
        self.scene = None  # type: str
        self.cmdReportOnce = 0  # type: int
        self.isSigned = 0  # type: int
        self.inputBreaker = 0  # type: int
        self.playerMode = 0  # type: int
        self.setScene = None  # type: str
        self.setSigniture = None  # type: str
        self.setInputBreaker = 0  # type: int
        self.setPlayerMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        srvGlobalParamsMsg = SrvGlobalParamsMsg()
        srvGlobalParamsMsg.Init(buf, pos)
        return cls.InitFromObj(srvGlobalParamsMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, srvGlobalParamsMsg):
        x = SrvGlobalParamsMsgT()
        x._UnPack(srvGlobalParamsMsg)
        return x

    # SrvGlobalParamsMsgT
    def _UnPack(self, srvGlobalParamsMsg):
        if srvGlobalParamsMsg is None:
            return
        self.timestamp = srvGlobalParamsMsg.Timestamp()
        self.name = srvGlobalParamsMsg.Name()
        self.sysId = srvGlobalParamsMsg.SysId()
        self.reqSrcId = srvGlobalParamsMsg.ReqSrcId()
        self.scene = srvGlobalParamsMsg.Scene()
        self.cmdReportOnce = srvGlobalParamsMsg.CmdReportOnce()
        self.isSigned = srvGlobalParamsMsg.IsSigned()
        self.inputBreaker = srvGlobalParamsMsg.InputBreaker()
        self.playerMode = srvGlobalParamsMsg.PlayerMode()
        self.setScene = srvGlobalParamsMsg.SetScene()
        self.setSigniture = srvGlobalParamsMsg.SetSigniture()
        self.setInputBreaker = srvGlobalParamsMsg.SetInputBreaker()
        self.setPlayerMode = srvGlobalParamsMsg.SetPlayerMode()

    # SrvGlobalParamsMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.scene is not None:
            scene = builder.CreateString(self.scene)
        if self.setScene is not None:
            setScene = builder.CreateString(self.setScene)
        if self.setSigniture is not None:
            setSigniture = builder.CreateString(self.setSigniture)
        SrvGlobalParamsMsgStart(builder)
        SrvGlobalParamsMsgAddTimestamp(builder, self.timestamp)
        if self.name is not None:
            SrvGlobalParamsMsgAddName(builder, name)
        SrvGlobalParamsMsgAddSysId(builder, self.sysId)
        SrvGlobalParamsMsgAddReqSrcId(builder, self.reqSrcId)
        if self.scene is not None:
            SrvGlobalParamsMsgAddScene(builder, scene)
        SrvGlobalParamsMsgAddCmdReportOnce(builder, self.cmdReportOnce)
        SrvGlobalParamsMsgAddIsSigned(builder, self.isSigned)
        SrvGlobalParamsMsgAddInputBreaker(builder, self.inputBreaker)
        SrvGlobalParamsMsgAddPlayerMode(builder, self.playerMode)
        if self.setScene is not None:
            SrvGlobalParamsMsgAddSetScene(builder, setScene)
        if self.setSigniture is not None:
            SrvGlobalParamsMsgAddSetSigniture(builder, setSigniture)
        SrvGlobalParamsMsgAddSetInputBreaker(builder, self.setInputBreaker)
        SrvGlobalParamsMsgAddSetPlayerMode(builder, self.setPlayerMode)
        srvGlobalParamsMsg = SrvGlobalParamsMsgEnd(builder)
        return srvGlobalParamsMsg


