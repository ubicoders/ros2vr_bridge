# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Vec3Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec3Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec3Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec3MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x4D\x44\x30", size_prefixed=size_prefixed)

    # Vec3Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec3Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec3MsgStart(builder):
    builder.StartObject(3)

def Vec3MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec3MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec3MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec3MsgEnd(builder):
    return builder.EndObject()



class Vec3MsgT(object):

    # Vec3MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec3Msg = Vec3Msg()
        vec3Msg.Init(buf, pos)
        return cls.InitFromObj(vec3Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec3Msg):
        x = Vec3MsgT()
        x._UnPack(vec3Msg)
        return x

    # Vec3MsgT
    def _UnPack(self, vec3Msg):
        if vec3Msg is None:
            return
        self.x = vec3Msg.X()
        self.y = vec3Msg.Y()
        self.z = vec3Msg.Z()

    # Vec3MsgT
    def Pack(self, builder):
        Vec3MsgStart(builder)
        Vec3MsgAddX(builder, self.x)
        Vec3MsgAddY(builder, self.y)
        Vec3MsgAddZ(builder, self.z)
        vec3Msg = Vec3MsgEnd(builder)
        return vec3Msg


class Vec4Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec4Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec4Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec4MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x4D\x44\x30", size_prefixed=size_prefixed)

    # Vec4Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec4Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec4MsgStart(builder):
    builder.StartObject(4)

def Vec4MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec4MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec4MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec4MsgAddW(builder, w):
    builder.PrependFloat32Slot(3, w, 0.0)

def Vec4MsgEnd(builder):
    return builder.EndObject()



class Vec4MsgT(object):

    # Vec4MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.w = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec4Msg = Vec4Msg()
        vec4Msg.Init(buf, pos)
        return cls.InitFromObj(vec4Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec4Msg):
        x = Vec4MsgT()
        x._UnPack(vec4Msg)
        return x

    # Vec4MsgT
    def _UnPack(self, vec4Msg):
        if vec4Msg is None:
            return
        self.x = vec4Msg.X()
        self.y = vec4Msg.Y()
        self.z = vec4Msg.Z()
        self.w = vec4Msg.W()

    # Vec4MsgT
    def Pack(self, builder):
        Vec4MsgStart(builder)
        Vec4MsgAddX(builder, self.x)
        Vec4MsgAddY(builder, self.y)
        Vec4MsgAddZ(builder, self.z)
        Vec4MsgAddW(builder, self.w)
        vec4Msg = Vec4MsgEnd(builder)
        return vec4Msg


class CommandMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CommandMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCommandMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CommandMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x4D\x44\x30", size_prefixed=size_prefixed)

    # CommandMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CommandMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CommandMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CommandMsg
    def CmdId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CommandMsg
    def SysId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CommandMsg
    def IntVal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CommandMsg
    def FloatVal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CommandMsg
    def IntArr(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CommandMsg
    def IntArrAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CommandMsg
    def IntArrLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CommandMsg
    def IntArrIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # CommandMsg
    def FloatArr(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CommandMsg
    def FloatArrAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # CommandMsg
    def FloatArrLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CommandMsg
    def FloatArrIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # CommandMsg
    def Vec3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CommandMsg
    def Vec4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec4Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CommandMsg
    def Vec3Arr(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CommandMsg
    def Vec3ArrLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CommandMsg
    def Vec3ArrIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # CommandMsg
    def Vec4Arr(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Vec4Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CommandMsg
    def Vec4ArrLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CommandMsg
    def Vec4ArrIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

def CommandMsgStart(builder):
    builder.StartObject(12)

def CommandMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def CommandMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(1, timestamp, 0.0)

def CommandMsgAddCmdId(builder, cmdId):
    builder.PrependUint32Slot(2, cmdId, 0)

def CommandMsgAddSysId(builder, sysId):
    builder.PrependUint32Slot(3, sysId, 0)

def CommandMsgAddIntVal(builder, intVal):
    builder.PrependInt32Slot(4, intVal, 0)

def CommandMsgAddFloatVal(builder, floatVal):
    builder.PrependFloat32Slot(5, floatVal, 0.0)

def CommandMsgAddIntArr(builder, intArr):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(intArr), 0)

def CommandMsgStartIntArrVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def CommandMsgAddFloatArr(builder, floatArr):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(floatArr), 0)

def CommandMsgStartFloatArrVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def CommandMsgAddVec3(builder, vec3):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(vec3), 0)

def CommandMsgAddVec4(builder, vec4):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(vec4), 0)

def CommandMsgAddVec3Arr(builder, vec3Arr):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(vec3Arr), 0)

def CommandMsgStartVec3ArrVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def CommandMsgAddVec4Arr(builder, vec4Arr):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(vec4Arr), 0)

def CommandMsgStartVec4ArrVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def CommandMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import List, Optional
except:
    pass

class CommandMsgT(object):

    # CommandMsgT
    def __init__(self):
        self.name = None  # type: str
        self.timestamp = 0.0  # type: float
        self.cmdId = 0  # type: int
        self.sysId = 0  # type: int
        self.intVal = 0  # type: int
        self.floatVal = 0.0  # type: float
        self.intArr = None  # type: List[int]
        self.floatArr = None  # type: List[float]
        self.vec3 = None  # type: Optional[Vec3MsgT]
        self.vec4 = None  # type: Optional[Vec4MsgT]
        self.vec3Arr = None  # type: List[Vec3MsgT]
        self.vec4Arr = None  # type: List[Vec4MsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        commandMsg = CommandMsg()
        commandMsg.Init(buf, pos)
        return cls.InitFromObj(commandMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, commandMsg):
        x = CommandMsgT()
        x._UnPack(commandMsg)
        return x

    # CommandMsgT
    def _UnPack(self, commandMsg):
        if commandMsg is None:
            return
        self.name = commandMsg.Name()
        self.timestamp = commandMsg.Timestamp()
        self.cmdId = commandMsg.CmdId()
        self.sysId = commandMsg.SysId()
        self.intVal = commandMsg.IntVal()
        self.floatVal = commandMsg.FloatVal()
        if not commandMsg.IntArrIsNone():
            if np is None:
                self.intArr = []
                for i in range(commandMsg.IntArrLength()):
                    self.intArr.append(commandMsg.IntArr(i))
            else:
                self.intArr = commandMsg.IntArrAsNumpy()
        if not commandMsg.FloatArrIsNone():
            if np is None:
                self.floatArr = []
                for i in range(commandMsg.FloatArrLength()):
                    self.floatArr.append(commandMsg.FloatArr(i))
            else:
                self.floatArr = commandMsg.FloatArrAsNumpy()
        if commandMsg.Vec3() is not None:
            self.vec3 = Vec3MsgT.InitFromObj(commandMsg.Vec3())
        if commandMsg.Vec4() is not None:
            self.vec4 = Vec4MsgT.InitFromObj(commandMsg.Vec4())
        if not commandMsg.Vec3ArrIsNone():
            self.vec3Arr = []
            for i in range(commandMsg.Vec3ArrLength()):
                if commandMsg.Vec3Arr(i) is None:
                    self.vec3Arr.append(None)
                else:
                    vec3Msg_ = Vec3MsgT.InitFromObj(commandMsg.Vec3Arr(i))
                    self.vec3Arr.append(vec3Msg_)
        if not commandMsg.Vec4ArrIsNone():
            self.vec4Arr = []
            for i in range(commandMsg.Vec4ArrLength()):
                if commandMsg.Vec4Arr(i) is None:
                    self.vec4Arr.append(None)
                else:
                    vec4Msg_ = Vec4MsgT.InitFromObj(commandMsg.Vec4Arr(i))
                    self.vec4Arr.append(vec4Msg_)

    # CommandMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.intArr is not None:
            if np is not None and type(self.intArr) is np.ndarray:
                intArr = builder.CreateNumpyVector(self.intArr)
            else:
                CommandMsgStartIntArrVector(builder, len(self.intArr))
                for i in reversed(range(len(self.intArr))):
                    builder.PrependInt32(self.intArr[i])
                intArr = builder.EndVector()
        if self.floatArr is not None:
            if np is not None and type(self.floatArr) is np.ndarray:
                floatArr = builder.CreateNumpyVector(self.floatArr)
            else:
                CommandMsgStartFloatArrVector(builder, len(self.floatArr))
                for i in reversed(range(len(self.floatArr))):
                    builder.PrependFloat32(self.floatArr[i])
                floatArr = builder.EndVector()
        if self.vec3 is not None:
            vec3 = self.vec3.Pack(builder)
        if self.vec4 is not None:
            vec4 = self.vec4.Pack(builder)
        if self.vec3Arr is not None:
            vec3Arrlist = []
            for i in range(len(self.vec3Arr)):
                vec3Arrlist.append(self.vec3Arr[i].Pack(builder))
            CommandMsgStartVec3ArrVector(builder, len(self.vec3Arr))
            for i in reversed(range(len(self.vec3Arr))):
                builder.PrependUOffsetTRelative(vec3Arrlist[i])
            vec3Arr = builder.EndVector()
        if self.vec4Arr is not None:
            vec4Arrlist = []
            for i in range(len(self.vec4Arr)):
                vec4Arrlist.append(self.vec4Arr[i].Pack(builder))
            CommandMsgStartVec4ArrVector(builder, len(self.vec4Arr))
            for i in reversed(range(len(self.vec4Arr))):
                builder.PrependUOffsetTRelative(vec4Arrlist[i])
            vec4Arr = builder.EndVector()
        CommandMsgStart(builder)
        if self.name is not None:
            CommandMsgAddName(builder, name)
        CommandMsgAddTimestamp(builder, self.timestamp)
        CommandMsgAddCmdId(builder, self.cmdId)
        CommandMsgAddSysId(builder, self.sysId)
        CommandMsgAddIntVal(builder, self.intVal)
        CommandMsgAddFloatVal(builder, self.floatVal)
        if self.intArr is not None:
            CommandMsgAddIntArr(builder, intArr)
        if self.floatArr is not None:
            CommandMsgAddFloatArr(builder, floatArr)
        if self.vec3 is not None:
            CommandMsgAddVec3(builder, vec3)
        if self.vec4 is not None:
            CommandMsgAddVec4(builder, vec4)
        if self.vec3Arr is not None:
            CommandMsgAddVec3Arr(builder, vec3Arr)
        if self.vec4Arr is not None:
            CommandMsgAddVec4Arr(builder, vec4Arr)
        commandMsg = CommandMsgEnd(builder)
        return commandMsg


