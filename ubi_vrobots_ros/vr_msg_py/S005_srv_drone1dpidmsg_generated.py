# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Vec3Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec3Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec3Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec3MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x35", size_prefixed=size_prefixed)

    # Vec3Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec3Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec3MsgStart(builder):
    builder.StartObject(3)

def Vec3MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec3MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec3MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec3MsgEnd(builder):
    return builder.EndObject()



class Vec3MsgT(object):

    # Vec3MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec3Msg = Vec3Msg()
        vec3Msg.Init(buf, pos)
        return cls.InitFromObj(vec3Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec3Msg):
        x = Vec3MsgT()
        x._UnPack(vec3Msg)
        return x

    # Vec3MsgT
    def _UnPack(self, vec3Msg):
        if vec3Msg is None:
            return
        self.x = vec3Msg.X()
        self.y = vec3Msg.Y()
        self.z = vec3Msg.Z()

    # Vec3MsgT
    def Pack(self, builder):
        Vec3MsgStart(builder)
        Vec3MsgAddX(builder, self.x)
        Vec3MsgAddY(builder, self.y)
        Vec3MsgAddZ(builder, self.z)
        vec3Msg = Vec3MsgEnd(builder)
        return vec3Msg


class Vec4Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec4Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec4Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec4MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x35", size_prefixed=size_prefixed)

    # Vec4Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec4Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec4MsgStart(builder):
    builder.StartObject(4)

def Vec4MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec4MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec4MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec4MsgAddW(builder, w):
    builder.PrependFloat32Slot(3, w, 0.0)

def Vec4MsgEnd(builder):
    return builder.EndObject()



class Vec4MsgT(object):

    # Vec4MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.w = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec4Msg = Vec4Msg()
        vec4Msg.Init(buf, pos)
        return cls.InitFromObj(vec4Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec4Msg):
        x = Vec4MsgT()
        x._UnPack(vec4Msg)
        return x

    # Vec4MsgT
    def _UnPack(self, vec4Msg):
        if vec4Msg is None:
            return
        self.x = vec4Msg.X()
        self.y = vec4Msg.Y()
        self.z = vec4Msg.Z()
        self.w = vec4Msg.W()

    # Vec4MsgT
    def Pack(self, builder):
        Vec4MsgStart(builder)
        Vec4MsgAddX(builder, self.x)
        Vec4MsgAddY(builder, self.y)
        Vec4MsgAddZ(builder, self.z)
        Vec4MsgAddW(builder, self.w)
        vec4Msg = Vec4MsgEnd(builder)
        return vec4Msg


class SrvDrone1DPIDMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SrvDrone1DPIDMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSrvDrone1DPIDMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SrvDrone1DPIDMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x30\x30\x35", size_prefixed=size_prefixed)

    # SrvDrone1DPIDMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SrvDrone1DPIDMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SrvDrone1DPIDMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvDrone1DPIDMsg
    def SysId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvDrone1DPIDMsg
    def ReqSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SrvDrone1DPIDMsg
    def SetPidOn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SrvDrone1DPIDMsg
    def SetKp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SrvDrone1DPIDMsg
    def SetKi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SrvDrone1DPIDMsg
    def SetKd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SrvDrone1DPIDMsg
    def SetSetpoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SrvDrone1DPIDMsg
    def PidOn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SrvDrone1DPIDMsg
    def Kp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SrvDrone1DPIDMsg
    def Ki(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SrvDrone1DPIDMsg
    def Kd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SrvDrone1DPIDMsg
    def Setpoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SrvDrone1DPIDMsg
    def SetLeftArmLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SrvDrone1DPIDMsg
    def LeftArmLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SrvDrone1DPIDMsg
    def SetRightArmLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SrvDrone1DPIDMsg
    def RightArmLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SrvDrone1DPIDMsg
    def SetUintMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SrvDrone1DPIDMsg
    def UintMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def SrvDrone1DPIDMsgStart(builder):
    builder.StartObject(20)

def SrvDrone1DPIDMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(0, timestamp, 0.0)

def SrvDrone1DPIDMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def SrvDrone1DPIDMsgAddSysId(builder, sysId):
    builder.PrependUint32Slot(2, sysId, 0)

def SrvDrone1DPIDMsgAddReqSrcId(builder, reqSrcId):
    builder.PrependUint32Slot(3, reqSrcId, 0)

def SrvDrone1DPIDMsgAddSetPidOn(builder, setPidOn):
    builder.PrependBoolSlot(4, setPidOn, 0)

def SrvDrone1DPIDMsgAddSetKp(builder, setKp):
    builder.PrependBoolSlot(5, setKp, 0)

def SrvDrone1DPIDMsgAddSetKi(builder, setKi):
    builder.PrependBoolSlot(6, setKi, 0)

def SrvDrone1DPIDMsgAddSetKd(builder, setKd):
    builder.PrependBoolSlot(7, setKd, 0)

def SrvDrone1DPIDMsgAddSetSetpoint(builder, setSetpoint):
    builder.PrependBoolSlot(8, setSetpoint, 0)

def SrvDrone1DPIDMsgAddPidOn(builder, pidOn):
    builder.PrependBoolSlot(9, pidOn, 0)

def SrvDrone1DPIDMsgAddKp(builder, kp):
    builder.PrependFloat32Slot(10, kp, 0.0)

def SrvDrone1DPIDMsgAddKi(builder, ki):
    builder.PrependFloat32Slot(11, ki, 0.0)

def SrvDrone1DPIDMsgAddKd(builder, kd):
    builder.PrependFloat32Slot(12, kd, 0.0)

def SrvDrone1DPIDMsgAddSetpoint(builder, setpoint):
    builder.PrependFloat32Slot(13, setpoint, 0.0)

def SrvDrone1DPIDMsgAddSetLeftArmLength(builder, setLeftArmLength):
    builder.PrependBoolSlot(14, setLeftArmLength, 0)

def SrvDrone1DPIDMsgAddLeftArmLength(builder, leftArmLength):
    builder.PrependFloat32Slot(15, leftArmLength, 0.0)

def SrvDrone1DPIDMsgAddSetRightArmLength(builder, setRightArmLength):
    builder.PrependBoolSlot(16, setRightArmLength, 0)

def SrvDrone1DPIDMsgAddRightArmLength(builder, rightArmLength):
    builder.PrependFloat32Slot(17, rightArmLength, 0.0)

def SrvDrone1DPIDMsgAddSetUintMass(builder, setUintMass):
    builder.PrependBoolSlot(18, setUintMass, 0)

def SrvDrone1DPIDMsgAddUintMass(builder, uintMass):
    builder.PrependFloat32Slot(19, uintMass, 0.0)

def SrvDrone1DPIDMsgEnd(builder):
    return builder.EndObject()



class SrvDrone1DPIDMsgT(object):

    # SrvDrone1DPIDMsgT
    def __init__(self):
        self.timestamp = 0.0  # type: float
        self.name = None  # type: str
        self.sysId = 0  # type: int
        self.reqSrcId = 0  # type: int
        self.setPidOn = False  # type: bool
        self.setKp = False  # type: bool
        self.setKi = False  # type: bool
        self.setKd = False  # type: bool
        self.setSetpoint = False  # type: bool
        self.pidOn = False  # type: bool
        self.kp = 0.0  # type: float
        self.ki = 0.0  # type: float
        self.kd = 0.0  # type: float
        self.setpoint = 0.0  # type: float
        self.setLeftArmLength = False  # type: bool
        self.leftArmLength = 0.0  # type: float
        self.setRightArmLength = False  # type: bool
        self.rightArmLength = 0.0  # type: float
        self.setUintMass = False  # type: bool
        self.uintMass = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        srvDrone1Dpidmsg = SrvDrone1DPIDMsg()
        srvDrone1Dpidmsg.Init(buf, pos)
        return cls.InitFromObj(srvDrone1Dpidmsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, srvDrone1Dpidmsg):
        x = SrvDrone1DPIDMsgT()
        x._UnPack(srvDrone1Dpidmsg)
        return x

    # SrvDrone1DPIDMsgT
    def _UnPack(self, srvDrone1Dpidmsg):
        if srvDrone1Dpidmsg is None:
            return
        self.timestamp = srvDrone1Dpidmsg.Timestamp()
        self.name = srvDrone1Dpidmsg.Name()
        self.sysId = srvDrone1Dpidmsg.SysId()
        self.reqSrcId = srvDrone1Dpidmsg.ReqSrcId()
        self.setPidOn = srvDrone1Dpidmsg.SetPidOn()
        self.setKp = srvDrone1Dpidmsg.SetKp()
        self.setKi = srvDrone1Dpidmsg.SetKi()
        self.setKd = srvDrone1Dpidmsg.SetKd()
        self.setSetpoint = srvDrone1Dpidmsg.SetSetpoint()
        self.pidOn = srvDrone1Dpidmsg.PidOn()
        self.kp = srvDrone1Dpidmsg.Kp()
        self.ki = srvDrone1Dpidmsg.Ki()
        self.kd = srvDrone1Dpidmsg.Kd()
        self.setpoint = srvDrone1Dpidmsg.Setpoint()
        self.setLeftArmLength = srvDrone1Dpidmsg.SetLeftArmLength()
        self.leftArmLength = srvDrone1Dpidmsg.LeftArmLength()
        self.setRightArmLength = srvDrone1Dpidmsg.SetRightArmLength()
        self.rightArmLength = srvDrone1Dpidmsg.RightArmLength()
        self.setUintMass = srvDrone1Dpidmsg.SetUintMass()
        self.uintMass = srvDrone1Dpidmsg.UintMass()

    # SrvDrone1DPIDMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        SrvDrone1DPIDMsgStart(builder)
        SrvDrone1DPIDMsgAddTimestamp(builder, self.timestamp)
        if self.name is not None:
            SrvDrone1DPIDMsgAddName(builder, name)
        SrvDrone1DPIDMsgAddSysId(builder, self.sysId)
        SrvDrone1DPIDMsgAddReqSrcId(builder, self.reqSrcId)
        SrvDrone1DPIDMsgAddSetPidOn(builder, self.setPidOn)
        SrvDrone1DPIDMsgAddSetKp(builder, self.setKp)
        SrvDrone1DPIDMsgAddSetKi(builder, self.setKi)
        SrvDrone1DPIDMsgAddSetKd(builder, self.setKd)
        SrvDrone1DPIDMsgAddSetSetpoint(builder, self.setSetpoint)
        SrvDrone1DPIDMsgAddPidOn(builder, self.pidOn)
        SrvDrone1DPIDMsgAddKp(builder, self.kp)
        SrvDrone1DPIDMsgAddKi(builder, self.ki)
        SrvDrone1DPIDMsgAddKd(builder, self.kd)
        SrvDrone1DPIDMsgAddSetpoint(builder, self.setpoint)
        SrvDrone1DPIDMsgAddSetLeftArmLength(builder, self.setLeftArmLength)
        SrvDrone1DPIDMsgAddLeftArmLength(builder, self.leftArmLength)
        SrvDrone1DPIDMsgAddSetRightArmLength(builder, self.setRightArmLength)
        SrvDrone1DPIDMsgAddRightArmLength(builder, self.rightArmLength)
        SrvDrone1DPIDMsgAddSetUintMass(builder, self.setUintMass)
        SrvDrone1DPIDMsgAddUintMass(builder, self.uintMass)
        srvDrone1Dpidmsg = SrvDrone1DPIDMsgEnd(builder)
        return srvDrone1Dpidmsg


