# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EmptyMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EmptyMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEmptyMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EmptyMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x4D\x50\x54", size_prefixed=size_prefixed)

    # EmptyMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EmptyMsg
    def Idx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def EmptyMsgStart(builder):
    builder.StartObject(1)

def EmptyMsgAddIdx(builder, idx):
    builder.PrependInt8Slot(0, idx, 0)

def EmptyMsgEnd(builder):
    return builder.EndObject()



class EmptyMsgT(object):

    # EmptyMsgT
    def __init__(self):
        self.idx = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        emptyMsg = EmptyMsg()
        emptyMsg.Init(buf, pos)
        return cls.InitFromObj(emptyMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, emptyMsg):
        x = EmptyMsgT()
        x._UnPack(emptyMsg)
        return x

    # EmptyMsgT
    def _UnPack(self, emptyMsg):
        if emptyMsg is None:
            return
        self.idx = emptyMsg.Idx()

    # EmptyMsgT
    def Pack(self, builder):
        EmptyMsgStart(builder)
        EmptyMsgAddIdx(builder, self.idx)
        emptyMsg = EmptyMsgEnd(builder)
        return emptyMsg


