# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Vec3Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec3Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec3Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec3MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x30\x30\x30", size_prefixed=size_prefixed)

    # Vec3Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec3Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec3Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec3MsgStart(builder):
    builder.StartObject(3)

def Vec3MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec3MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec3MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec3MsgEnd(builder):
    return builder.EndObject()



class Vec3MsgT(object):

    # Vec3MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec3Msg = Vec3Msg()
        vec3Msg.Init(buf, pos)
        return cls.InitFromObj(vec3Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec3Msg):
        x = Vec3MsgT()
        x._UnPack(vec3Msg)
        return x

    # Vec3MsgT
    def _UnPack(self, vec3Msg):
        if vec3Msg is None:
            return
        self.x = vec3Msg.X()
        self.y = vec3Msg.Y()
        self.z = vec3Msg.Z()

    # Vec3MsgT
    def Pack(self, builder):
        Vec3MsgStart(builder)
        Vec3MsgAddX(builder, self.x)
        Vec3MsgAddY(builder, self.y)
        Vec3MsgAddZ(builder, self.z)
        vec3Msg = Vec3MsgEnd(builder)
        return vec3Msg


class Vec4Msg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vec4Msg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVec4Msg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vec4MsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x30\x30\x30", size_prefixed=size_prefixed)

    # Vec4Msg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec4Msg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vec4Msg
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Vec4MsgStart(builder):
    builder.StartObject(4)

def Vec4MsgAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def Vec4MsgAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def Vec4MsgAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def Vec4MsgAddW(builder, w):
    builder.PrependFloat32Slot(3, w, 0.0)

def Vec4MsgEnd(builder):
    return builder.EndObject()



class Vec4MsgT(object):

    # Vec4MsgT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.w = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec4Msg = Vec4Msg()
        vec4Msg.Init(buf, pos)
        return cls.InitFromObj(vec4Msg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec4Msg):
        x = Vec4MsgT()
        x._UnPack(vec4Msg)
        return x

    # Vec4MsgT
    def _UnPack(self, vec4Msg):
        if vec4Msg is None:
            return
        self.x = vec4Msg.X()
        self.y = vec4Msg.Y()
        self.z = vec4Msg.Z()
        self.w = vec4Msg.W()

    # Vec4MsgT
    def Pack(self, builder):
        Vec4MsgStart(builder)
        Vec4MsgAddX(builder, self.x)
        Vec4MsgAddY(builder, self.y)
        Vec4MsgAddZ(builder, self.z)
        Vec4MsgAddW(builder, self.w)
        vec4Msg = Vec4MsgEnd(builder)
        return vec4Msg


class Collision(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Collision()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCollision(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CollisionBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x30\x30\x30", size_prefixed=size_prefixed)

    # Collision
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Collision
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Collision
    def CollisionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Collision
    def ObjectName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Collision
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Collision
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Collision
    def Eul(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Collision
    def Angvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def CollisionStart(builder):
    builder.StartObject(7)

def CollisionAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(0, timestamp, 0.0)

def CollisionAddCollisionType(builder, collisionType):
    builder.PrependUint8Slot(1, collisionType, 0)

def CollisionAddObjectName(builder, objectName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(objectName), 0)

def CollisionAddPos(builder, pos):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)

def CollisionAddVel(builder, vel):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(vel), 0)

def CollisionAddEul(builder, eul):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(eul), 0)

def CollisionAddAngvel(builder, angvel):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(angvel), 0)

def CollisionEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class CollisionT(object):

    # CollisionT
    def __init__(self):
        self.timestamp = 0.0  # type: float
        self.collisionType = 0  # type: int
        self.objectName = None  # type: str
        self.pos = None  # type: Optional[Vec3MsgT]
        self.vel = None  # type: Optional[Vec3MsgT]
        self.eul = None  # type: Optional[Vec3MsgT]
        self.angvel = None  # type: Optional[Vec3MsgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        collision = Collision()
        collision.Init(buf, pos)
        return cls.InitFromObj(collision)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, collision):
        x = CollisionT()
        x._UnPack(collision)
        return x

    # CollisionT
    def _UnPack(self, collision):
        if collision is None:
            return
        self.timestamp = collision.Timestamp()
        self.collisionType = collision.CollisionType()
        self.objectName = collision.ObjectName()
        if collision.Pos() is not None:
            self.pos = Vec3MsgT.InitFromObj(collision.Pos())
        if collision.Vel() is not None:
            self.vel = Vec3MsgT.InitFromObj(collision.Vel())
        if collision.Eul() is not None:
            self.eul = Vec3MsgT.InitFromObj(collision.Eul())
        if collision.Angvel() is not None:
            self.angvel = Vec3MsgT.InitFromObj(collision.Angvel())

    # CollisionT
    def Pack(self, builder):
        if self.objectName is not None:
            objectName = builder.CreateString(self.objectName)
        if self.pos is not None:
            pos = self.pos.Pack(builder)
        if self.vel is not None:
            vel = self.vel.Pack(builder)
        if self.eul is not None:
            eul = self.eul.Pack(builder)
        if self.angvel is not None:
            angvel = self.angvel.Pack(builder)
        CollisionStart(builder)
        CollisionAddTimestamp(builder, self.timestamp)
        CollisionAddCollisionType(builder, self.collisionType)
        if self.objectName is not None:
            CollisionAddObjectName(builder, objectName)
        if self.pos is not None:
            CollisionAddPos(builder, pos)
        if self.vel is not None:
            CollisionAddVel(builder, vel)
        if self.eul is not None:
            CollisionAddEul(builder, eul)
        if self.angvel is not None:
            CollisionAddAngvel(builder, angvel)
        collision = CollisionEnd(builder)
        return collision


class StatesMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StatesMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStatesMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StatesMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x30\x30\x30", size_prefixed=size_prefixed)

    # StatesMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StatesMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StatesMsg
    def SysId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # StatesMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # StatesMsg
    def LinAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def LinVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def LinPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def Altitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # StatesMsg
    def AngAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def AngVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def Euler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def EulerDot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def Quaternion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec4Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def Pwm(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # StatesMsg
    def PwmAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # StatesMsg
    def PwmLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatesMsg
    def PwmIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # StatesMsg
    def Actuators(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # StatesMsg
    def ActuatorsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # StatesMsg
    def ActuatorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatesMsg
    def ActuatorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # StatesMsg
    def Force(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def Torque(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def Accelerometer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def Gyroscope(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def Magnetometer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def Barometer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # StatesMsg
    def Temperature(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # StatesMsg
    def GpsPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def GpsVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def Mass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # StatesMsg
    def Cg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def MomentArms(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # StatesMsg
    def MomentArmsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # StatesMsg
    def MomentArmsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatesMsg
    def MomentArmsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # StatesMsg
    def Moi3x1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Vec3Msg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def Moi3x3(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # StatesMsg
    def Moi3x3AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # StatesMsg
    def Moi3x3Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatesMsg
    def Moi3x3IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # StatesMsg
    def ExtraProps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # StatesMsg
    def ExtraPropsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # StatesMsg
    def ExtraPropsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatesMsg
    def ExtraPropsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # StatesMsg
    def Collisions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Collision()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatesMsg
    def CollisionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatesMsg
    def CollisionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # StatesMsg
    def ImageData0(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # StatesMsg
    def ImageData0AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # StatesMsg
    def ImageData0Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatesMsg
    def ImageData0IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # StatesMsg
    def ImageData1(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # StatesMsg
    def ImageData1AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # StatesMsg
    def ImageData1Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatesMsg
    def ImageData1IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

def StatesMsgStart(builder):
    builder.StartObject(32)

def StatesMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def StatesMsgAddSysId(builder, sysId):
    builder.PrependUint32Slot(1, sysId, 0)

def StatesMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(2, timestamp, 0.0)

def StatesMsgAddLinAcc(builder, linAcc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(linAcc), 0)

def StatesMsgAddLinVel(builder, linVel):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(linVel), 0)

def StatesMsgAddLinPos(builder, linPos):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(linPos), 0)

def StatesMsgAddAltitude(builder, altitude):
    builder.PrependFloat32Slot(6, altitude, 0.0)

def StatesMsgAddAngAcc(builder, angAcc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(angAcc), 0)

def StatesMsgAddAngVel(builder, angVel):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(angVel), 0)

def StatesMsgAddEuler(builder, euler):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(euler), 0)

def StatesMsgAddEulerDot(builder, eulerDot):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(eulerDot), 0)

def StatesMsgAddQuaternion(builder, quaternion):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(quaternion), 0)

def StatesMsgAddPwm(builder, pwm):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(pwm), 0)

def StatesMsgStartPwmVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StatesMsgAddActuators(builder, actuators):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(actuators), 0)

def StatesMsgStartActuatorsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StatesMsgAddForce(builder, force):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(force), 0)

def StatesMsgAddTorque(builder, torque):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(torque), 0)

def StatesMsgAddAccelerometer(builder, accelerometer):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(accelerometer), 0)

def StatesMsgAddGyroscope(builder, gyroscope):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(gyroscope), 0)

def StatesMsgAddMagnetometer(builder, magnetometer):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(magnetometer), 0)

def StatesMsgAddBarometer(builder, barometer):
    builder.PrependFloat32Slot(19, barometer, 0.0)

def StatesMsgAddTemperature(builder, temperature):
    builder.PrependFloat32Slot(20, temperature, 0.0)

def StatesMsgAddGpsPos(builder, gpsPos):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(gpsPos), 0)

def StatesMsgAddGpsVel(builder, gpsVel):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(gpsVel), 0)

def StatesMsgAddMass(builder, mass):
    builder.PrependFloat32Slot(23, mass, 0.0)

def StatesMsgAddCg(builder, cg):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(cg), 0)

def StatesMsgAddMomentArms(builder, momentArms):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(momentArms), 0)

def StatesMsgStartMomentArmsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StatesMsgAddMoi3x1(builder, moi3x1):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(moi3x1), 0)

def StatesMsgAddMoi3x3(builder, moi3x3):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(moi3x3), 0)

def StatesMsgStartMoi3x3Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StatesMsgAddExtraProps(builder, extraProps):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(extraProps), 0)

def StatesMsgStartExtraPropsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StatesMsgAddCollisions(builder, collisions):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(collisions), 0)

def StatesMsgStartCollisionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StatesMsgAddImageData0(builder, imageData0):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(imageData0), 0)

def StatesMsgStartImageData0Vector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StatesMsgAddImageData1(builder, imageData1):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(imageData1), 0)

def StatesMsgStartImageData1Vector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StatesMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import List, Optional
except:
    pass

class StatesMsgT(object):

    # StatesMsgT
    def __init__(self):
        self.name = None  # type: str
        self.sysId = 0  # type: int
        self.timestamp = 0.0  # type: float
        self.linAcc = None  # type: Optional[Vec3MsgT]
        self.linVel = None  # type: Optional[Vec3MsgT]
        self.linPos = None  # type: Optional[Vec3MsgT]
        self.altitude = 0.0  # type: float
        self.angAcc = None  # type: Optional[Vec3MsgT]
        self.angVel = None  # type: Optional[Vec3MsgT]
        self.euler = None  # type: Optional[Vec3MsgT]
        self.eulerDot = None  # type: Optional[Vec3MsgT]
        self.quaternion = None  # type: Optional[Vec4MsgT]
        self.pwm = None  # type: List[int]
        self.actuators = None  # type: List[float]
        self.force = None  # type: Optional[Vec3MsgT]
        self.torque = None  # type: Optional[Vec3MsgT]
        self.accelerometer = None  # type: Optional[Vec3MsgT]
        self.gyroscope = None  # type: Optional[Vec3MsgT]
        self.magnetometer = None  # type: Optional[Vec3MsgT]
        self.barometer = 0.0  # type: float
        self.temperature = 0.0  # type: float
        self.gpsPos = None  # type: Optional[Vec3MsgT]
        self.gpsVel = None  # type: Optional[Vec3MsgT]
        self.mass = 0.0  # type: float
        self.cg = None  # type: Optional[Vec3MsgT]
        self.momentArms = None  # type: List[float]
        self.moi3x1 = None  # type: Optional[Vec3MsgT]
        self.moi3x3 = None  # type: List[float]
        self.extraProps = None  # type: List[float]
        self.collisions = None  # type: List[CollisionT]
        self.imageData0 = None  # type: List[int]
        self.imageData1 = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        statesMsg = StatesMsg()
        statesMsg.Init(buf, pos)
        return cls.InitFromObj(statesMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, statesMsg):
        x = StatesMsgT()
        x._UnPack(statesMsg)
        return x

    # StatesMsgT
    def _UnPack(self, statesMsg):
        if statesMsg is None:
            return
        self.name = statesMsg.Name()
        self.sysId = statesMsg.SysId()
        self.timestamp = statesMsg.Timestamp()
        if statesMsg.LinAcc() is not None:
            self.linAcc = Vec3MsgT.InitFromObj(statesMsg.LinAcc())
        if statesMsg.LinVel() is not None:
            self.linVel = Vec3MsgT.InitFromObj(statesMsg.LinVel())
        if statesMsg.LinPos() is not None:
            self.linPos = Vec3MsgT.InitFromObj(statesMsg.LinPos())
        self.altitude = statesMsg.Altitude()
        if statesMsg.AngAcc() is not None:
            self.angAcc = Vec3MsgT.InitFromObj(statesMsg.AngAcc())
        if statesMsg.AngVel() is not None:
            self.angVel = Vec3MsgT.InitFromObj(statesMsg.AngVel())
        if statesMsg.Euler() is not None:
            self.euler = Vec3MsgT.InitFromObj(statesMsg.Euler())
        if statesMsg.EulerDot() is not None:
            self.eulerDot = Vec3MsgT.InitFromObj(statesMsg.EulerDot())
        if statesMsg.Quaternion() is not None:
            self.quaternion = Vec4MsgT.InitFromObj(statesMsg.Quaternion())
        if not statesMsg.PwmIsNone():
            if np is None:
                self.pwm = []
                for i in range(statesMsg.PwmLength()):
                    self.pwm.append(statesMsg.Pwm(i))
            else:
                self.pwm = statesMsg.PwmAsNumpy()
        if not statesMsg.ActuatorsIsNone():
            if np is None:
                self.actuators = []
                for i in range(statesMsg.ActuatorsLength()):
                    self.actuators.append(statesMsg.Actuators(i))
            else:
                self.actuators = statesMsg.ActuatorsAsNumpy()
        if statesMsg.Force() is not None:
            self.force = Vec3MsgT.InitFromObj(statesMsg.Force())
        if statesMsg.Torque() is not None:
            self.torque = Vec3MsgT.InitFromObj(statesMsg.Torque())
        if statesMsg.Accelerometer() is not None:
            self.accelerometer = Vec3MsgT.InitFromObj(statesMsg.Accelerometer())
        if statesMsg.Gyroscope() is not None:
            self.gyroscope = Vec3MsgT.InitFromObj(statesMsg.Gyroscope())
        if statesMsg.Magnetometer() is not None:
            self.magnetometer = Vec3MsgT.InitFromObj(statesMsg.Magnetometer())
        self.barometer = statesMsg.Barometer()
        self.temperature = statesMsg.Temperature()
        if statesMsg.GpsPos() is not None:
            self.gpsPos = Vec3MsgT.InitFromObj(statesMsg.GpsPos())
        if statesMsg.GpsVel() is not None:
            self.gpsVel = Vec3MsgT.InitFromObj(statesMsg.GpsVel())
        self.mass = statesMsg.Mass()
        if statesMsg.Cg() is not None:
            self.cg = Vec3MsgT.InitFromObj(statesMsg.Cg())
        if not statesMsg.MomentArmsIsNone():
            if np is None:
                self.momentArms = []
                for i in range(statesMsg.MomentArmsLength()):
                    self.momentArms.append(statesMsg.MomentArms(i))
            else:
                self.momentArms = statesMsg.MomentArmsAsNumpy()
        if statesMsg.Moi3x1() is not None:
            self.moi3x1 = Vec3MsgT.InitFromObj(statesMsg.Moi3x1())
        if not statesMsg.Moi3x3IsNone():
            if np is None:
                self.moi3x3 = []
                for i in range(statesMsg.Moi3x3Length()):
                    self.moi3x3.append(statesMsg.Moi3x3(i))
            else:
                self.moi3x3 = statesMsg.Moi3x3AsNumpy()
        if not statesMsg.ExtraPropsIsNone():
            if np is None:
                self.extraProps = []
                for i in range(statesMsg.ExtraPropsLength()):
                    self.extraProps.append(statesMsg.ExtraProps(i))
            else:
                self.extraProps = statesMsg.ExtraPropsAsNumpy()
        if not statesMsg.CollisionsIsNone():
            self.collisions = []
            for i in range(statesMsg.CollisionsLength()):
                if statesMsg.Collisions(i) is None:
                    self.collisions.append(None)
                else:
                    collision_ = CollisionT.InitFromObj(statesMsg.Collisions(i))
                    self.collisions.append(collision_)
        if not statesMsg.ImageData0IsNone():
            if np is None:
                self.imageData0 = []
                for i in range(statesMsg.ImageData0Length()):
                    self.imageData0.append(statesMsg.ImageData0(i))
            else:
                self.imageData0 = statesMsg.ImageData0AsNumpy()
        if not statesMsg.ImageData1IsNone():
            if np is None:
                self.imageData1 = []
                for i in range(statesMsg.ImageData1Length()):
                    self.imageData1.append(statesMsg.ImageData1(i))
            else:
                self.imageData1 = statesMsg.ImageData1AsNumpy()

    # StatesMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.linAcc is not None:
            linAcc = self.linAcc.Pack(builder)
        if self.linVel is not None:
            linVel = self.linVel.Pack(builder)
        if self.linPos is not None:
            linPos = self.linPos.Pack(builder)
        if self.angAcc is not None:
            angAcc = self.angAcc.Pack(builder)
        if self.angVel is not None:
            angVel = self.angVel.Pack(builder)
        if self.euler is not None:
            euler = self.euler.Pack(builder)
        if self.eulerDot is not None:
            eulerDot = self.eulerDot.Pack(builder)
        if self.quaternion is not None:
            quaternion = self.quaternion.Pack(builder)
        if self.pwm is not None:
            if np is not None and type(self.pwm) is np.ndarray:
                pwm = builder.CreateNumpyVector(self.pwm)
            else:
                StatesMsgStartPwmVector(builder, len(self.pwm))
                for i in reversed(range(len(self.pwm))):
                    builder.PrependUint32(self.pwm[i])
                pwm = builder.EndVector()
        if self.actuators is not None:
            if np is not None and type(self.actuators) is np.ndarray:
                actuators = builder.CreateNumpyVector(self.actuators)
            else:
                StatesMsgStartActuatorsVector(builder, len(self.actuators))
                for i in reversed(range(len(self.actuators))):
                    builder.PrependFloat32(self.actuators[i])
                actuators = builder.EndVector()
        if self.force is not None:
            force = self.force.Pack(builder)
        if self.torque is not None:
            torque = self.torque.Pack(builder)
        if self.accelerometer is not None:
            accelerometer = self.accelerometer.Pack(builder)
        if self.gyroscope is not None:
            gyroscope = self.gyroscope.Pack(builder)
        if self.magnetometer is not None:
            magnetometer = self.magnetometer.Pack(builder)
        if self.gpsPos is not None:
            gpsPos = self.gpsPos.Pack(builder)
        if self.gpsVel is not None:
            gpsVel = self.gpsVel.Pack(builder)
        if self.cg is not None:
            cg = self.cg.Pack(builder)
        if self.momentArms is not None:
            if np is not None and type(self.momentArms) is np.ndarray:
                momentArms = builder.CreateNumpyVector(self.momentArms)
            else:
                StatesMsgStartMomentArmsVector(builder, len(self.momentArms))
                for i in reversed(range(len(self.momentArms))):
                    builder.PrependFloat32(self.momentArms[i])
                momentArms = builder.EndVector()
        if self.moi3x1 is not None:
            moi3x1 = self.moi3x1.Pack(builder)
        if self.moi3x3 is not None:
            if np is not None and type(self.moi3x3) is np.ndarray:
                moi3x3 = builder.CreateNumpyVector(self.moi3x3)
            else:
                StatesMsgStartMoi3x3Vector(builder, len(self.moi3x3))
                for i in reversed(range(len(self.moi3x3))):
                    builder.PrependFloat32(self.moi3x3[i])
                moi3x3 = builder.EndVector()
        if self.extraProps is not None:
            if np is not None and type(self.extraProps) is np.ndarray:
                extraProps = builder.CreateNumpyVector(self.extraProps)
            else:
                StatesMsgStartExtraPropsVector(builder, len(self.extraProps))
                for i in reversed(range(len(self.extraProps))):
                    builder.PrependFloat32(self.extraProps[i])
                extraProps = builder.EndVector()
        if self.collisions is not None:
            collisionslist = []
            for i in range(len(self.collisions)):
                collisionslist.append(self.collisions[i].Pack(builder))
            StatesMsgStartCollisionsVector(builder, len(self.collisions))
            for i in reversed(range(len(self.collisions))):
                builder.PrependUOffsetTRelative(collisionslist[i])
            collisions = builder.EndVector()
        if self.imageData0 is not None:
            if np is not None and type(self.imageData0) is np.ndarray:
                imageData0 = builder.CreateNumpyVector(self.imageData0)
            else:
                StatesMsgStartImageData0Vector(builder, len(self.imageData0))
                for i in reversed(range(len(self.imageData0))):
                    builder.PrependUint8(self.imageData0[i])
                imageData0 = builder.EndVector()
        if self.imageData1 is not None:
            if np is not None and type(self.imageData1) is np.ndarray:
                imageData1 = builder.CreateNumpyVector(self.imageData1)
            else:
                StatesMsgStartImageData1Vector(builder, len(self.imageData1))
                for i in reversed(range(len(self.imageData1))):
                    builder.PrependUint8(self.imageData1[i])
                imageData1 = builder.EndVector()
        StatesMsgStart(builder)
        if self.name is not None:
            StatesMsgAddName(builder, name)
        StatesMsgAddSysId(builder, self.sysId)
        StatesMsgAddTimestamp(builder, self.timestamp)
        if self.linAcc is not None:
            StatesMsgAddLinAcc(builder, linAcc)
        if self.linVel is not None:
            StatesMsgAddLinVel(builder, linVel)
        if self.linPos is not None:
            StatesMsgAddLinPos(builder, linPos)
        StatesMsgAddAltitude(builder, self.altitude)
        if self.angAcc is not None:
            StatesMsgAddAngAcc(builder, angAcc)
        if self.angVel is not None:
            StatesMsgAddAngVel(builder, angVel)
        if self.euler is not None:
            StatesMsgAddEuler(builder, euler)
        if self.eulerDot is not None:
            StatesMsgAddEulerDot(builder, eulerDot)
        if self.quaternion is not None:
            StatesMsgAddQuaternion(builder, quaternion)
        if self.pwm is not None:
            StatesMsgAddPwm(builder, pwm)
        if self.actuators is not None:
            StatesMsgAddActuators(builder, actuators)
        if self.force is not None:
            StatesMsgAddForce(builder, force)
        if self.torque is not None:
            StatesMsgAddTorque(builder, torque)
        if self.accelerometer is not None:
            StatesMsgAddAccelerometer(builder, accelerometer)
        if self.gyroscope is not None:
            StatesMsgAddGyroscope(builder, gyroscope)
        if self.magnetometer is not None:
            StatesMsgAddMagnetometer(builder, magnetometer)
        StatesMsgAddBarometer(builder, self.barometer)
        StatesMsgAddTemperature(builder, self.temperature)
        if self.gpsPos is not None:
            StatesMsgAddGpsPos(builder, gpsPos)
        if self.gpsVel is not None:
            StatesMsgAddGpsVel(builder, gpsVel)
        StatesMsgAddMass(builder, self.mass)
        if self.cg is not None:
            StatesMsgAddCg(builder, cg)
        if self.momentArms is not None:
            StatesMsgAddMomentArms(builder, momentArms)
        if self.moi3x1 is not None:
            StatesMsgAddMoi3x1(builder, moi3x1)
        if self.moi3x3 is not None:
            StatesMsgAddMoi3x3(builder, moi3x3)
        if self.extraProps is not None:
            StatesMsgAddExtraProps(builder, extraProps)
        if self.collisions is not None:
            StatesMsgAddCollisions(builder, collisions)
        if self.imageData0 is not None:
            StatesMsgAddImageData0(builder, imageData0)
        if self.imageData1 is not None:
            StatesMsgAddImageData1(builder, imageData1)
        statesMsg = StatesMsgEnd(builder)
        return statesMsg


